{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action } from \"mobx\";\nexport let UserStore = (_class = (_temp = class UserStore {\n  constructor() {\n    _initializerDefineProperty(this, \"title\", _descriptor, this);\n  }\n\n  hydrate(serializedStore) {\n    this.title = serializedStore === null || serializedStore === void 0 ? void 0 : serializedStore.title;\n  }\n\n  changeTitle(newTitle) {\n    this.title = newTitle;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"title\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"changeTitle\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"changeTitle\"), _class.prototype)), _class);\nexport async function fetchInitialStoreState() {\n  return {};\n}","map":{"version":3,"sources":["/Users/niawjunior/Desktop/kai-huay/src/stores/user.ts"],"names":["observable","action","UserStore","hydrate","serializedStore","title","changeTitle","newTitle","fetchInitialStoreState"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AAMA,WAAaC,SAAb,sBAAO,MAAMA,SAAN,CAAgB;AAAA;AAAA;AAAA;;AAGrBC,EAAAA,OAAO,CAACC,eAAD,EAAmC;AACxC,SAAKC,KAAL,GAAaD,eAAb,aAAaA,eAAb,uBAAaA,eAAe,CAAEC,KAA9B;AACD;;AAEOC,EAAAA,WAAR,CAAoBC,QAApB,EAAsC;AACpC,SAAKF,KAAL,GAAaE,QAAb;AACD;;AAToB,CAAvB,+EACGP,UADH;AAAA;AAAA;AAAA;AAAA;AAAA,gEAOGC,MAPH;AAYA,OAAO,eAAeO,sBAAf,GAAwC;AAC7C,SAAO,EAAP;AACD","sourcesContent":["import { observable, action } from \"mobx\";\n\ntype SerializedStore = {\n  title: string;\n};\n\nexport class UserStore {\n  @observable title!: string;\n\n  hydrate(serializedStore: SerializedStore) {\n    this.title = serializedStore?.title;\n  }\n\n  @action changeTitle(newTitle: string) {\n    this.title = newTitle;\n  }\n}\n\nexport async function fetchInitialStoreState() {\n  return {};\n}"]},"metadata":{},"sourceType":"module"}